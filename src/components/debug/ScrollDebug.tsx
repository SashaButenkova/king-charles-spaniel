// components/Debug/ScrollDebug.tsx
import { useEffect } from 'react'

export const ScrollDebug: React.FC = () => {
	useEffect(() => {
		if (process.env.NODE_ENV !== 'development') return

		const checkOverflow = () => {
			const overflowingElements: Element[] = []

			document.querySelectorAll('*').forEach(el => {
				const rect = el.getBoundingClientRect()
				const style = window.getComputedStyle(el)

				if (rect.right > window.innerWidth || rect.left < 0) {
					overflowingElements.push(el)
					console.warn('üö® –≠–ª–µ–º–µ–Ω—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã:', el)
					console.warn('–°—Ç–∏–ª–∏:', {
						width: style.width,
						maxWidth: style.maxWidth,
						padding: style.padding,
						margin: style.margin,
						position: style.position,
						left: style.left,
						right: style.right,
					})
				}
			})

			if (overflowingElements.length > 0) {
				console.log(
					`–ù–∞–π–¥–µ–Ω–æ ${overflowingElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º`
				)
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ä–µ—Å–∞–π–∑–∞
		const timer = setTimeout(checkOverflow, 1000)
		window.addEventListener('resize', checkOverflow)
		window.addEventListener('load', checkOverflow)

		return () => {
			clearTimeout(timer)
			window.removeEventListener('resize', checkOverflow)
			window.removeEventListener('load', checkOverflow)
		}
	}, [])

	return null
}

// –î–æ–±–∞–≤—å—Ç–µ –≤ App.tsx –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:
// {process.env.NODE_ENV === 'development' && <ScrollDebug />}
